● git add 파일명
    staging area로 이동
● git commit -m "메시지 내용입력"
    repository(저장소)로 이동
● git add .
    파일 전체 staging area로 이동
● git restore --staged 파일명
    스테이징된 파일을 취소    

참고 : 파일을 staging area로 이동하는 것을 '스테이징'이라고 한다.

● git status
    상태창 보기
● git log --all --oneline
    commit한 내용 조회
    --oneline 뒤에 --graph를 붙이면 그래프로 그려준다.
    이때 Vim 에디터가 켜진다 > j, k로 위아래 스크롤 가능하고 q로 종료가능
● git diff
    최근 commit 파일과 현재 파일의 차이점을 보여준다
    Vim 에디터가 켜진다
    스페이스바나 엔터도 하나의 변경점으로 보기 때문에 보통 생으로 사용하진 않는다.
● git difftool (여기에 commit ID를 입력하거나 생략가능) (여기에도 commit ID를 입력하면 앞에있는 ID와 비교해서 보여준다)
    git diff의 시각적 문제점을 해결한 명령어
    y를 누르면 왼쪽은 수정 전, 오른쪽은 수정 후 파일을 띄워준다.
    역시 Vim 에디터가 켜지며 h, j, k, l로 방향키, 종료는 ':q' 또는 ':qa' 입력

● git branch 브랜치명
    작성한 브랜치명으로 새 브랜치 생성
● git switch 브랜치명
    작성한 브랜치명으로 이동
※ git status를 입력하면 'On branch 브랜치명'이라고 뜨는데, 이때 자신이 있는 브랜치의 위치를 볼 수 있다.
● git merge 합치려는 브랜치명
    브랜치 합치기
    최종적으로 개발을 이어갈 브랜치로 이동 후, 합치려는 브랜치명을 입력하면 합칠 수 있다.


● git branch -d 브랜치명
    merge가 완료된 브랜치명을 삭제할 수 있다
● git branch -D 브랜치명
    merge를 하지 않은 branch 삭제

여러 merge 방법
1. 3-way merge
2. fast-forward merge
3. rebase & merge
4. squash & merge

rebase
일반 merge와 역할은 같음. 간단하고 짧은 브랜치들은 rebase를 쓰면 깔끔해보인다.
하지만 conflict가 많이 발생
 rebase & merge 하는 법
1. 새로운 브랜치로 이동해서
2. git rebase 중심브랜치명
3. 중심브랜치로 이동해서
4. git merge 새로운 브랜치명

squash & merge
● git merge --squash '합치려는 브랜치명'
    일반 merge에 squash만 들어감
    이 옵션을 사용하면 일반 merge에서 사용했던 사이드 브랜치들이 log에 나타나지 않아 깔끔해진다.